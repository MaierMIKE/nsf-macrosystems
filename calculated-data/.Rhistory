stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% as_integer()
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% as_number()
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na)
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
bind_rows((stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()))
bind_rows(stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather())
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(Average=mean(value))
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean)
stds %>% add_column(std.value)
stds %>% add_column(std.value='NA')
stds %>% add_column(std.value='NA') -> stds
stds
View(stds)
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(std.value='NA') -> stds
for(i in 1:nrow(stds-1)){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> x
stds[i+1,std.value] <- x
}
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> x
x
x[1]
x[1,1]
stds[i+1,std.value] <- x
stds[i+1,'std.value'] <- x
stds
View(stds)
library(tidyverse)
# Read in raw data
sir <- read_csv("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/raw-data/substrate_induced_respiration.csv")
# Set directory to calculated data folder
setwd("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/calculated-data")
# Calculate standard values
not_any_na <- function(x) all(!is.na(x))
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(std.value='NA') -> stds
for(i in 1:nrow(stds-1)){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> x
stds[i+1,'std.value'] <- x
}
i=1
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> x
stds[i+1,'std.value'] <- x
nrow(stds-1)
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> x
stds[i+1,'std.value'] <- x
}
stds
View(stds)
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(std.value='NA') -> stds
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> x
stds[i+1,'std.value'] <- x
}
View(stds)
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(std.value='NA') -> stds
View(stds)
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[i+1,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value))
for(i in 1:nrow(stds)-1){
index <- i+1
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[index,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> x
stds[index,'std.value'] <- x
}
View(stds)
nrow(stds)-1
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[index,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
)
i=2
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value))
i=1
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value))
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(std.value='NA') -> stds
View(stds)
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> stds[(i+1),'std.value']
}
View(stds)
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value))
stds$std.value[1] <- 'NA'
stds$std.value[1] <- stds$std.value[2]
View(stds)
stds <- select(unique.id,std.value)
names(stds)
stds <- stds %>% select(unique.id,std.value)
View(stds)
full_join(stds,sir)
full_join(stds,sir) %>% View()
stds
right_join(stds,sir) %>% View()
sir %>% fill(std.value) %>% View()
# Assign standard values at all places in between
right_join(stds,sir) -> sir
sir %>% fill(std.value) %>% View()
sir %>% fill(std.value,direction="up") %>% View()
sir %>% fill(std.value,.direction="up") %>% View()
# Assign standard values at all places in between
right_join(stds,sir) %>% fill(std.value, .direction = "up") -> sir
library(tidyverse)
# Read in raw data
sir <- read_csv("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/raw-data/substrate_induced_respiration.csv")
# Set directory to calculated data folder
setwd("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/calculated-data")
# Calculate standard values for all places with standards
not_any_na <- function(x) all(!is.na(x))
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(std.value='NA') -> stds
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> stds[(i+1),'std.value']
}
stds$std.value[1] <- stds$std.value[2]
stds <- stds %>% select(unique.id,std.value)
# Assign standard values at all places in between
right_join(stds,sir) %>% fill(std.value, .direction = "up") -> sir
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = time.sampled - time.flushed,
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (amountCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incuationTime
) %>% names()
is(sir$time.sampled)
library(tidyverse)
# Read in raw data
sir <- read_csv("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/raw-data/substrate_induced_respiration.csv")
# Set directory to calculated data folder
setwd("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/calculated-data")
# Calculate standard values for all places with standards
not_any_na <- function(x) all(!is.na(x))
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(meanStandard='NA') -> stds
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> stds[(i+1),'meanStandard']
}
stds$meanStandard[1] <- stds$meanStandard[2]
stds <- stds %>% select(unique.id,meanStandard)
# Assign standard values at all places in between
right_join(stds,sir) %>% fill(meanStandard, .direction = "up") -> sir
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = time.sampled - time.flushed,
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (amountCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incuationTime
) %>% names()
# Read in raw data
sir <- read_csv("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/raw-data/substrate_induced_respiration.csv")
# Set directory to calculated data folder
setwd("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/calculated-data")
# Calculate standard values for all places with standards
not_any_na <- function(x) all(!is.na(x))
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(meanStandard='NA') -> stds
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> stds[(i+1),'meanStandard']
}
stds$meanStandard[1] <- stds$meanStandard[2]
stds <- stds %>% select(unique.id,meanStandard)
# Assign standard values at all places in between
right_join(stds,sir) %>% fill(meanStandard, .direction = "up") -> sir
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = time.sampled - time.flushed,
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (amountCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incuationTime
) %>% names()
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = time.sampled - time.flushed,
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (amountCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incuationTime
) %>% View()
sir$meanStandard
stds$meanStandard <- as.numeric(stds$meanStandard)
stds$meanStandard
# Read in raw data
sir <- read_csv("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/raw-data/substrate_induced_respiration.csv")
# Set directory to calculated data folder
setwd("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/calculated-data")
# Calculate standard values for all places with standards
not_any_na <- function(x) all(!is.na(x))
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(meanStandard='NA') -> stds
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> stds[(i+1),'meanStandard']
}
stds$meanStandard[1] <- stds$meanStandard[2]
stds$meanStandard <- as.numeric(stds$meanStandard)
stds <- stds %>% select(unique.id,meanStandard)
# Assign standard values at all places in between
right_join(stds,sir) %>% fill(meanStandard, .direction = "up") -> sir
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = time.sampled - time.flushed,
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (amountCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incuationTime
) %>% View()
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = time.sampled - time.flushed,
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incuationTime
) %>% View()
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = time.sampled - time.flushed,
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% View()
sir %>%
mutate(
incubationTime = time.sampled - time.flushed) %>% View()
18600/60
/60
310/60
60*60
18600/3600
sir %>%
mutate(
incubationTime = (time.sampled - time.flushed)/3600 %>% View()
)
sir %>%
mutate(
incubationTime = (time.sampled - time.flushed)/3600) %>% View()
is(sir$incubationTime)
sir$incubationTime %>% as.numeric()
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = as.numeric((time.sampled - time.flushed)/3600),
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% View()
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = as.numeric((time.sampled - time.flushed)/3600),
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% View()
library(tidyverse)
# Read in raw data
sir <- read_csv("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/raw-data/substrate_induced_respiration.csv")
# Set directory to calculated data folder
setwd("~/Box Sync/Work/The Nature Conservancy/NSF Macrosystems/calculated-data")
# Calculate standard values for all places with standards
not_any_na <- function(x) all(!is.na(x))
sir[is.na(sir$number.stds)==FALSE,] -> stds
stds %>% add_column(meanStandard='NA') -> stds
for(i in 1:nrow(stds)-1){
bind_rows(
stds[i,c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather(),
stds[(i+1),c("std.value.1","std.value.2","std.value.3","std.value.4")] %>%
select_if(not_any_na) %>% gather()
) %>%
summarize(mean = mean(value)) -> stds[(i+1),'meanStandard']
}
stds$meanStandard[1] <- stds$meanStandard[2]
stds$meanStandard <- as.numeric(stds$meanStandard)
stds <- stds %>% select(unique.id,meanStandard)
# Assign standard values at all places in between
right_join(stds,sir) %>% fill(meanStandard, .direction = "up") -> sir
# Calculate gravimetric moisture and export both non-aggregated and aggregated replicate data
sir %>%
mutate(
incubationTime = as.numeric((time.sampled - time.flushed)/3600),
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% select(-number.stds:-std.value.4) %>%
write.csv("sir_calcs.csv")
aggregate(. ~ site + plot,
data =
mutate(
incubationTime = as.numeric((time.sampled - time.flushed)/3600),
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% select(-number.stds:-std.value.4),
FUN = mean
) %>%
write.csv("sir_calcs_aggregated.csv")
aggregate(. ~ site + plot,
data =
sir %>% mutate(
incubationTime = as.numeric((time.sampled - time.flushed)/3600),
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% select(-number.stds:-std.value.4),
FUN = mean
) %>%
write.csv("sir_calcs_aggregated.csv")
warnings()
aggregate(CO2CperHour ~ site + plot,
data =
sir %>% mutate(
incubationTime = as.numeric((time.sampled - time.flushed)/3600),
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% select(-number.stds:-std.value.4),
FUN = mean
) %>%
write.csv("sir_calcs_aggregated.csv")
aggregate(CO2CperHour ~ unique.id + site + plot,
data =
sir %>% mutate(
incubationTime = as.numeric((time.sampled - time.flushed)/3600),
dilutionFactor = ((5*times.sampled)/(57.15-actual.fresh.mass))+1,
measuredCO2 = irga.integral*(standard.co2/meanStandard),
concentrationCO2 = measuredCO2*dilutionFactor,
volumeCO2 = concentrationCO2*((57.15-actual.fresh.mass)/1000),
molesCO2 = (volumeCO2/22.414)*273.15/293.15,
CO2C = molesCO2*12.011,
CO2CperHour = CO2C/incubationTime
) %>% select(-number.stds:-std.value.4),
FUN = mean
) %>%
write.csv("sir_calcs_aggregated.csv")
